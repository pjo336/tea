exports['works 1'] = "weeee"

exports['logger.ts 1'] = "import * as config from 'config';\nimport * as pino from 'pino';\n\nconst logger = pino({\n  level: config.get('logLevel'),\n  prettyPrint: config.get('logPretty'),\n});\n\n/**\n * @param {String} name The name assigned to the new logger\n * @returns {pino.Logger} a logger instance\n */\nfunction Logger(name: string): pino.Logger {\n  return logger.child({ name });\n}\n\nexport default Logger;\n"

exports['app.ts 1'] = "import * as dotenv from 'dotenv';\nimport * as express from 'express';\n\ndotenv.config();\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\napp.get('/status', (_: express.Request, res: express.Response) => {\n  res.json({\n    status: 'OK',\n    version: require('../package.json').version,\n  });\n});\n\nexport default app;\n"

exports['index.ts 1'] = "import app from './app';\nimport Logger from './utils/logger';\n\nconst server = require('http').createServer(app);\n\nconst port = 2222;\nconst appLogger = Logger('app');\nserver.listen(port, () => appLogger.info(`e2e-test-app running on port: ${port}`));\n\nprocess.on('SIGINT', () => {\n  // Stops the server from accepting new connections and finishes existing connections.\n  server.close(function(err: Error) {\n    if (err) {\n      console.error(err);\n      process.exit(1);\n    }\n  });\n});\n"

exports['default.json 1'] = "{\n  \"db\": {\n    \"name\": \"e2e-test-app_dev\",\n    \"host\": \"0.0.0.0\",\n    \"port\": 5432\n  },\n  \"logLevel\": \"debug\",\n  \"logPretty\": true\n}\n"

exports['test.json 1'] = "{\n  \"db\": {\n    \"name\": \"e2e-test-app_test\",\n    \"host\": \"0.0.0.0\",\n    \"port\": 5432\n  },\n  \"logLevel\": \"debug\",\n  \"logPretty\": true\n}\n"

exports['.dockerignore 1'] = "node_modules\nnpm-debug.log\ncoverage\n.vscode\n.nyc_output\n.git\n"

exports['.gitignore 1'] = "node_modules\ndist\nbuild\n\n.nyc_output\ncoverage\n\n.env*\n# Elastic Beanstalk Files\n.elasticbeanstalk/*\n!.elasticbeanstalk/config.yml\n!.elasticbeanstalk/*.global.yml\n"

exports['.nvmrc 1'] = "10.15.1\n"

exports['.prettierignore 1'] = "*.json"

exports['.prettierrc 1'] = "{\n  \"useTabs\": false,\n  \"printWidth\": 100,\n  \"tabWidth\": 2,\n  \"singleQuote\": true,\n  \"trailingComma\": \"es5\",\n  \"jsxBracketSameLine\": false,\n  \"rcVerbose\": true\n}\n"

exports['Dockerfile 1'] = "FROM node:10.15.1-alpine as builder\nLABEL Name=e2e-test-app Version=0.0.1\n# Set environment variables\nENV APP_NAME e2e-test-app\nARG NODE_ENV\nENV NODE_ENV $NODE_ENV\n\nRUN npm i -g npm\n\nADD https://github.com/Yelp/dumb-init/releases/download/v1.2.1/dumb-init_1.2.1_amd64 /usr/local/bin/dumb-init\n\nWORKDIR /$APP_NAME\nCOPY process.yml ./\nCOPY config config\nCOPY package*.json ./\nRUN npm i\nCOPY ts*.json ./\nCOPY src src\n\nRUN npm run build\nCOPY dist dist\n\nFROM node:10.15.1-alpine as release\nWORKDIR /e2e-test-app\nCOPY --from=builder /e2e-test-app ./\nCOPY --from=builder /usr/local/bin/dumb-init /usr/local/bin/dumb-init\nEXPOSE 2222\n\nRUN chmod +x /usr/local/bin/dumb-init\nUSER node\nCMD [\"dumb-init\", \"npm\", \"run\", \"start:prod\"]\n"

exports['nodemon.json 1'] = "{\n  \"watch\": [\n    \"src\",\n    \"config\"\n  ],\n  \"ext\": \"ts\",\n  \"ignore\": [\n    \"tests/**/*.test.ts\",\n    \"node_modules\"\n  ],\n  \"exec\": \"ts-node ./src/index.ts\"\n}\n"

exports['package.json 1'] = "{\n  \"name\": \"e2e-test-app\",\n  \"version\": \"0.0.1\",\n  \"description\": \"this is a test app\",\n  \"main\": \"build/index.js\",\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"lint\": \"npm run lint:src && npm run lint:test\",\n    \"lint:src\": \"node_modules/.bin/tslint -c tslint.json 'src/**/*.ts'\",\n    \"lint:test\": \"node_modules/.bin/tslint -c tslint.json 'tests/**/*.ts'\",\n    \"preversion\": \"npm test\",\n    \"version\": \"npm run build && git add -A dist\",\n    \"postversion\": \"git push && git push --tags && rm -rf build/temp\",\n    \"start\": \"NODE_ENV=development MODULE_ALIAS=true nodemon --inspect\",\n    \"start:prod\": \"NODE_ENV=production node_modules/.bin/pm2-runtime process.yml\",\n    \"test\": \"npm run test:unit && npm run test:integration && npm run test:e2e\",\n    \"test:unit\": \"MODULE_ALIAS=true TS_NODE_PROJECT=./tests/unit/tsconfig.json NODE_ENV=test nyc mocha --opts ./tests/unit/mocha.opts\",\n    \"test:integration\": \"MODULE_ALIAS=true TS_NODE_PROJECT=./tests/integration/tsconfig.json NODE_ENV=test nyc mocha --opts ./tests/integration/mocha.opts\",\n    \"test:e2e\": \"echo \\\"Error: no end to end tests specified\\\" && exit 0\",\n    \"upgrade-interactive\": \"npm-check --update\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"npm run lint && tsc && npm test\"\n    }\n  },\n  \"nyc\": {\n    \"all\": true,\n    \"extension\": [\n      \".ts\"\n    ],\n    \"sourceMap\": true,\n    \"instrument\": true,\n    \"include\": [\n      \"src/**/*.ts\"\n    ],\n    \"exclude\": [\n      \"**/*.test.ts\"\n    ],\n    \"cache\": false\n  },\n  \"author\": \"mocha/chai\",\n  \"license\": \"UNLICENSED\",\n  \"dependencies\": {},\n  \"devDependencies\": {}\n}\n"

exports['process.yml 1'] = "apps:\n  - script: 'build/index.js'\n    name: 'e2e-test-app'\n    exec_mode: 'cluster'\n    instances: 2\n"

exports['tsconfig.json 1'] = "{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"commonjs\",\n    \"lib\": [\n      \"es2018\",\n      \"dom\",\n      \"esnext\"\n    ],\n    \"sourceMap\": true,\n    \"skipLibCheck\": true,\n    \"outDir\": \"build\",\n    \"removeComments\": true,\n    \"noEmitOnError\": true,\n    \"strict\": true,\n    \"strictPropertyInitialization\": false,\n    \"alwaysStrict\": true,\n    \"moduleResolution\": \"node\",\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"~/*\": [\n        \"*\"\n      ]\n    },\n    \"typeRoots\": [\n      \"node_modules/@types\",\n      \"src/types\"\n    ],\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true\n  },\n  \"include\": [\n    \"src/**/*\"\n  ],\n  \"exclude\": [\n    \"node_modules\",\n    \"tests/**/*\"\n  ]\n}\n"

exports['tslint.json 1'] = "{\n  \"rules\": {\n    \"class-name\": true,\n    \"comment-format\": [\n      true,\n      \"check-space\"\n    ],\n    \"indent\": [\n      true,\n      \"spaces\"\n    ],\n    \"one-line\": [\n      true,\n      \"check-open-brace\",\n      \"check-whitespace\"\n    ],\n    \"no-var-keyword\": true,\n    \"semicolon\": [\n      true,\n      \"always\",\n      \"ignore-bound-class-methods\"\n    ],\n    \"whitespace\": [\n      true,\n      \"check-decl\",\n      \"check-operator\",\n      \"check-module\",\n      \"check-separator\",\n      \"check-type\"\n    ],\n    \"typedef-whitespace\": [\n      true,\n      {\n        \"call-signature\": \"nospace\",\n        \"index-signature\": \"nospace\",\n        \"parameter\": \"nospace\",\n        \"property-declaration\": \"nospace\",\n        \"variable-declaration\": \"nospace\"\n      },\n      {\n        \"call-signature\": \"onespace\",\n        \"index-signature\": \"onespace\",\n        \"parameter\": \"onespace\",\n        \"property-declaration\": \"onespace\",\n        \"variable-declaration\": \"onespace\"\n      }\n    ],\n    \"no-internal-module\": true,\n    \"no-trailing-whitespace\": true,\n    \"prefer-const\": true,\n    \"jsdoc-format\": true\n  }\n}\n"

